unit Paguina_cadastro;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.Imaging.pngimage, Vcl.Imaging.jpeg, conexao;

type
  Tpag_cadastro = class(TForm)
    painel_principal: TPanel;
    text_login_pag: TLabel;
    descricao: TLabel;
    label_jaconta: TLabel;
    goto_cadastro: TLabel;
    painel_email: TPanel;
    imagem_email: TImage;
    label_email: TLabel;
    email_cad: TEdit;
    painel_senha_confirmação: TPanel;
    senha_conf_cad: TEdit;
    painel_nome: TPanel;
    imagem_nome: TImage;
    label_nome: TLabel;
    nome_cad: TEdit;
    painel_senha: TPanel;
    imagem_senha: TImage;
    label_senha1: TLabel;
    senha_cad: TEdit;
    imagem_cong_senha: TImage;
    email_direção: TLabel;
    nome_direção: TLabel;
    senha_conf_direção: TLabel;
    senha_direção: TLabel;
    retorna_ao_menu: TImage;
    Image1: TImage;
    Label1: TLabel;
    Label2: TLabel;
    Label4: TLabel;
    Image2: TImage;
    procedure goto_cadastroClick(Sender: TObject);
    procedure retorna_menuClick(Sender: TObject);
    procedure retorna_ao_menuClick(Sender: TObject);
    procedure retorna_ao_menuMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure retorna_ao_menuMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure FormCreate(Sender: TObject);
    procedure Label2MouseEnter(Sender: TObject);
    procedure Label2MouseLeave(Sender: TObject);
    procedure Label4Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  pag_cadastro: Tpag_cadastro;
  high_voltar: Integer;
  high_volt_txt: Integer;

implementation

uses
  pg_home, Paguina_incial_login, Paguina_login, pag_servicos;

{$R *.dfm}

procedure Tpag_cadastro.FormCreate(Sender: TObject);
begin
  high_voltar := retorna_ao_menu.Top;
  high_volt_txt := Label2.Top;
end;

procedure Tpag_cadastro.goto_cadastroClick(Sender: TObject);
begin
  pag_home.MostrarFormularioEmbed(pag_login);
end;

procedure Tpag_cadastro.Label2MouseEnter(Sender: TObject);
begin
Label2.Enabled:=false;
end;

procedure Tpag_cadastro.Label2MouseLeave(Sender: TObject);
begin
Label2.Enabled:=true;
end;

procedure Tpag_cadastro.Label4Click(Sender: TObject);
begin
  if (Trim(nome_cad.Text) = '') or (Trim(email_cad.Text) = '') or (Trim(senha_cad.Text) = '') then
  begin
    ShowMessage('Preencha todos os campos!');
    Exit;
  end;

  if senha_cad.Text <> senha_conf_cad.Text then
  begin
    ShowMessage('As senhas não coincidem!');
    Exit;
  end;

  try
    with DataModule2.FDQuery1 do
    begin
      SQL.Text := 'INSERT INTO usuarios (nome, email, senha) VALUES (:nome, :email, :senha)';
      ParamByName('nome').AsString  := nome_cad.Text;
      ParamByName('email').AsString := email_cad.Text;
      ParamByName('senha').AsString := senha_cad.Text; // depois recomendo criptografar
      ExecSQL;
    end;

    ShowMessage('Cadastro realizado com sucesso!');

    // Aqui chamamos a tela de serviços
    pag_home.MostrarFormularioEmbed(pag_servicos);

  except
    on E: Exception do
      ShowMessage('Erro ao cadastrar: ' + E.Message);
  end;
end;

procedure Tpag_cadastro.retorna_ao_menuClick(Sender: TObject);
begin
  pag_home.MostrarFormularioEmbed(pag_inicial);
end;

procedure Tpag_cadastro.retorna_ao_menuMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  retorna_ao_menu.Top := high_voltar;
  Label2.Top := high_volt_txt;
end;

procedure Tpag_cadastro.retorna_ao_menuMouseUp(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  retorna_ao_menu.Top := high_voltar + 5;
  Label2.Top := high_volt_txt +5;
end;

procedure Tpag_cadastro.retorna_menuClick(Sender: TObject);
begin
  pag_home.MostrarFormularioEmbed(pag_inicial);
end;

end.
